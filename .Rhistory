#agewed
count(GSSnew1, 'agewed')
GSSnew1$agewed <-factor(GSSnew1$agewed)
str(GSSnew1$agewed)
#year
count(GSSnew1, 'year')
GSSnew1$year <-factor(GSSnew1$year)
str(GSSnew1$year)
#id
count(GSSnew1, 'id')
GSSnew1$id <-factor(GSSnew1$id)
str(GSSnew1$id)
# sampcode
count(GSSnew1, 'sampcode')
GSSnew1$sampcode <-factor(GSSnew1$sampcode)
str(GSSnew1$sampcode)
#oversamp
count(GSSnew1, 'oversamp')
GSSnew1$oversamp <-factor(GSSnew1$oversamp)
str(GSSnew1$oversamp)
#formwt
count(GSSnew1, 'formwt')
GSSnew1$formwt <-factor(GSSnew1$formwt)
str(GSSnew1$formwt)
#wtssall
count(GSSnew1, 'wtssall')
GSSnew1$wtssall <-factor(GSSnew1$wtssall)
str(GSSnew1$wtssall)
#version
count(GSSnew1, 'version')
GSSnew1$version <-factor(GSSnew1$version)
str(GSSnew1$version)
View(GSSnew1)
dim(GSSnew1)
GSS.A1 <- subset(GSSnew1, (GSSnew1$version==1|GSSnew1$version==4))
GSS.B1 <- subset(GSSnew1, (GSSnew1$version==2|GSSnew1$version==5))
GSS.C1 <- subset(GSSnew1, (GSSnew1$version==3|GSSnew1$version==6))
## Train-validate-test split for GSS Ballot A
set.seed(567)
rand <- runif(nrow(GSS.A1))
trainA1 <- GSS.A1[rand>0.3,]
validA1 <- GSS.A1[rand>0.15 & rand <0.3,]
testA1 <- GSS.A1[rand<0.15,]
## Train-validate-test split for GSS Ballot B
set.seed(678)
rand <- runif(nrow(GSS.B1))
trainB1 <- GSS.B1[rand>0.3,]
validB1 <- GSS.B1[rand>0.15 & rand <0.3,]
testB1 <- GSS.B1[rand<0.15,]
## Train-validate-test split for GSS Ballot B
set.seed(789)
rand <- runif(nrow(GSS.C1))
trainC1 <- GSS.C1[rand>0.3,]
validC1 <- GSS.C1[rand>0.15 & rand <0.3,]
testC1 <- GSS.C1[rand<0.15,]
library(class)
euclideanDist <- function(a, b){
d = 0
for(i in c(1:(length(a)-1) ))
{
d = d + (a[[i]]-b[[i]])^2
}
d = sqrt(d)
return(d)
}
knn_predict <- function(testA1, trainA1, k_value){
pred <- c()  #empty pred vector
#LOOP-1
for(i in c(1:nrow(testA1))){   #looping over each record of test data
eu_dist =c()          #eu_dist & eu_char empty  vector
eu_char = c()
good = 0              #good & bad variable initialization with 0 value
bad = 0
#LOOP-2-looping over train data
for(j in c(1:nrow(trainA1))){
#adding euclidean distance b/w test data point and train data to eu_dist vector
eu_dist <- c(eu_dist, euclideanDist(testA1[i,], trainA1[j,]))
#adding class variable of training data in eu_char
eu_char <- c(eu_char, as.character(trainA1[j,][[6]]))
}
eu <- data.frame(eu_char, eu_dist) #eu dataframe created with eu_char & eu_dist columns
eu <- eu[order(eu$eu_dist),]       #sorting eu dataframe to gettop K neighbors
eu <- eu[1:k_value,]               #eu dataframe with top K neighbors
#Loop 3: loops over eu and counts classes of neibhors.
for(k in c(1:nrow(eu))){
if(as.character(eu[k,"eu_char"]) == "g"){
good = good + 1
}
else
bad = bad + 1
}
# Compares the no. of neighbors with class label good or bad
if(good > bad){          #if majority of neighbors are good then put "g" in pred vector
pred <- c(pred, "g")
}
else if(good < bad){
#if majority of neighbors are bad then put "b" in pred vector
pred <- c(pred, "b")
}
}
return(pred) #return pred vector
}
accuracy <- function(testA1){
correct = 0
for(i in c(1:nrow(testA1))){
if(testA1[i,6] == testA1[i,7]){
correct = correct+1
}
}
accu = correct/nrow(testA1) * 100
return(accu)
}
K = 5
predictions <- knn_predict(testA1, trainA1, K) #calling knn_predict()
>>>>>>> refs/remotes/origin/Decision-Trees-
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$premarsx))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gridExtra)
library(plyr)
library(rpart)
library(rpart.plot)
library(Hmisc)
library(DMwR)
library(randomForest)
library(plotROC)
library(factoextra)
library(NbClust)
library(cluster)
load("GSSdivorce.rda")
#Restrict to 1996-2014 and married, divorced or separated
GSS.divorce <- GSS.divorce[GSS.divorce$year>=1996, ]
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce$marital <- factor(GSS.divorce$marital)
#Collapse marital status to married or split
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
GSS.divorce$marital2 [is.na(GSS.divorce$marital) ==T] <- NA
GSS.divorce$marital2 <- factor(GSS.divorce$marital2)
GSSnew <- GSS.divorce[!is.na(GSS.divorce$marital2),]
summary(GSSnew$marital2)
#Create categorical variable for size of place
GSSnew$sizecat <- NA
GSSnew$sizecat [GSSnew$size < 10] <- "rural"
GSSnew$sizecat [GSSnew$size >=10 & GSSnew$size <= 99] <- "small"
GSSnew$sizecat [GSSnew$size >=100 & GSSnew$size <= 999] <- "medium"
GSSnew$sizecat [GSSnew$size >=1000 & GSSnew$size <= 9999] <- "large"
GSSnew$sizecat <- factor(GSSnew$sizecat)
str(GSSnew)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$premarsx))
colnames(tab) <- c("status", "premarital", "count")
pie_1b <- ggplot(tab, aes(status, premarital)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on premarital sex?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
pie_1b
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$pornlaw))
colnames(tab) <- c("status", "porn", "count")
pie_2b <- ggplot(tab, aes(status, porn)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on pornography regulation?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
pie_2b
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$xmarsex))
colnames(tab) <- c("status", "exmar", "count")
pie_3b <- ggplot(tab, aes(status, exmar)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on extramarital sex?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
pie_3b
## Separate GSSnew by ballot type A, B or C
GSS.A <- subset(GSSnew, (GSSnew$version==1|GSSnew$version==4))
GSS.A <- subset(GSS.A, select = c(marital2, year, sexeduc, region, premarsx, xmarsex, partyid, fund, childs, degree, Agecat1, widowed, wrkstat, polviews, happy, class, income, reg16, family16, born, parborn, sizecat, attend, relig16, bible, satfin, abnomore, absingle, divlaw, fefam))
GSS.A.comp <- GSS.A[complete.cases(GSS.A),]
GSS.B <- subset(GSSnew, (GSSnew$version==2|GSSnew$version==5))
GSS.B <- subset(GSS.B, select = c(marital2, year, sexeduc, premarsx, region, pornlaw, partyid, fund, childs, degree, Agecat1, widowed, wrkstat, polviews, happy, trust, class, income, reg16, family16, born, parborn, sizecat, attend, relig16, bible, divlaw, xmovie, satfin, helpful, fair, satjob, consci, fefam))
GSS.B.comp <- GSS.B[complete.cases(GSS.B),]
GSS.C <- subset(GSSnew, (GSSnew$version==3|GSSnew$version==6))
GSS.C <- subset(GSS.C, select = c(year, region, xmarsex, pornlaw, partyid, fund, childs, degree, Agecat1, widowed, wrkstat, polviews, happy, trust, class, reg16, family16, born, parborn, income, fair, helpful, sizecat, attend, relig16, consci, satjob, satfin, abnomore, absingle, xmovie, marital2))
GSS.C.comp <- GSS.C[complete.cases(GSS.C),]
## Train-validate-test split for GSS Ballot A
set.seed(567)
rand <- runif(nrow(GSS.A.comp))
trainA <- GSS.A.comp[rand>0.3,]
validA <- GSS.A.comp[rand>0.15 & rand <0.3,]
testA <- GSS.A.comp[rand<0.15,]
## Train-validate-test split for GSS Ballot B
set.seed(678)
rand <- runif(nrow(GSS.B.comp))
trainB <- GSS.B.comp[rand>0.3,]
validB <- GSS.B.comp[rand>0.15 & rand <0.3,]
testB <- GSS.B.comp[rand<0.15,]
## Train-validate-test split for GSS Ballot B
set.seed(789)
rand <- runif(nrow(GSS.C.comp))
trainC <- GSS.C.comp[rand>0.3,]
validC <- GSS.C.comp[rand>0.15 & rand <0.3,]
testC <- GSS.C.comp[rand<0.15,]
fitA <- glm(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + satfin + abnomore + absingle + divlaw, family=binomial(link='logit'),data=trainA)
summary(fitA)
trainA$pred <- fitA$fitted.values
trainA$pred <- ifelse(trainA$pred > 0.5,1,0)
table(trainA$marital2, trainA$pred)
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0.00479512)
printcp(rtree_fitA)
rpart.plot(rtree_fitA, shadow.col="gray", nn=TRUE)
trainApred <- predict(rtree_fitA, trainA, type = 'class')
table(trainApred, trainA$marital2)
# accuracy overall (1547 + 331)/(1547+124+345+331)
(1547 + 331)/(1547+124+345+331)
validA$pred <- predict(fitA, newdata = validA, type = "response")
validA$pred <- ifelse(validA$pred > 0.5,1,0)
table(validA$marital2, validA$pred)
(304 + 69)/(304+42+90+69)
fitA2 <- glm(marital2 ~ year + region + childs + degree + Agecat1 + widowed + wrkstat + class + income +  family16 + born + parborn + sizecat, family=binomial(link='logit'),data=trainA)
trainA$pred2 <- fitA2$fitted.values
trainA$pred2 <- ifelse(trainA$pred2 > 0.5,1,0)
table(trainA$marital2, trainA$pred2)
(1561 + 266)/(1561+110+410+266)
validA$pred2 <- predict(fitA2, newdata = validA, type = "response")
validA$pred2 <- ifelse(validA$pred2 > 0.5,1,0)
table(validA$marital2, validA$pred2)
(320+56)/(320+26+1-3+56)
fitB <- glm(marital2 ~ year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + xmovie + divlaw + fefam, family=binomial(link='logit'),data=trainB)
summary(fitB)
trainB$pred <- fitB$fitted.values
trainB$pred <- ifelse(trainB$pred > 0.5,1,0)
table(trainB$marital2, trainB$pred)
testA$pred2 <- predict(fitA2, newdata = validA, type = "response")
testA$pred2 <- predict(fitA2, newdata = testA, type = "response")
testA$pred2 <- ifelse(testA$pred2 > 0.5,1,0)
table(testA$marital2, testA$pred2)
(345+48)/(345+31+96+48)
fitB <- glm(marital2 ~ year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + xmovie + divlaw + fefam, family=binomial(link='logit'),data=trainB)
summary(fitB)
trainB$pred <- fitB$fitted.values
trainB$pred <- ifelse(trainB$pred > 0.5,1,0)
table(trainB$marital2, trainB$pred)
validB$pred <- predict(fitB, newdata = validB, type = "response")
(1293 + 266)/(1293+114+338+243)
validB$pred <- predict(fitB, newdata = validB, type = "response")
validB$pred <- ifelse(validB$pred > 0.5,1,0)
table(validB$marital2, validB$pred)
(254 + 60)/(254+31+77+60)
fitB2 <- glm(marital2 ~ pornlaw + childs + degree + Agecat1 + wrkstat + happy + class + income + reg16 + attend + bible + satjob + xmovie + divlaw, family=binomial(link='logit'),data=trainB)
summary(fitB2)
trainB$pred2 <- fitB2$fitted.values
trainB$pred2 <- ifelse(trainB$pred2 > 0.5,1,0)
table(trainB$marital2, trainB$pred2)
(1304+234)/(1304+103+347+234)
347/(347+234)
fitC <- glm(marital2 ~ year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + helpful + fair + consci + satjob + satfin + xmovie, family=binomial(link='logit'),data=trainC)
summary(fitC)
trainC$pred <- fitC$fitted.values
trainC$pred <- ifelse(trainC$pred > 0.5,1,0)
table(trainC$marital2, trainC$pred)
(1292+109)/(1292+109+295+288)
validC$pred <- predict(fitC, newdata = validC, type = "response")
validC$pred <- ifelse(validC$pred > 0.5,1,0)
table(validC$marital2, validC$pred)
(259+46)/(259+42+80+46)
testA$pred <- predict(fitA, newdata = testA, type = "response")
testA$pred <- ifelse(testA$pred > 0.5,1,0)
table(testA$marital2, testA$pred)
(337+54)/(337+39+90+54)
summary(fitA)
#using packages factoextra and NbClust and Cluster
# create binary matrix
gss.a.mat <- model.matrix(~0 + year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + satfin + abnomore + absingle + divlaw, GSS.A.comp)
# now with B ballot
gss.b.mat <- model.matrix(~0 + year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + xmovie + divlaw + fefam, GSS.B.comp)
# now with Ballot C
gss.c.mat <- model.matrix(~0 + year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + helpful + fair + consci + satjob + satfin + abnomore + absingle + xmovie, GSS.C.comp)
#determine optimal number of clusters using method within-cluster sum of squares
# visualize as line ("elbow" method)
elbow.a <- fviz_nbclust(gss.a.mat, kmeans, method = "wss")
# (silhouette method)
sil.plot.a <- fviz_nbclust(gss.a.mat, kmeans, method = "silhouette")
# optimal cluster is 2!
# compute kmeans clusters
km.a <- kmeans(gss.a.mat, 2, 10)
# compute hierarchical clusters and check silhouette for validation
hc.a <- eclust(gss.a.mat, "hclust", k=2, method="ward.D2", graph=FALSE)
sil.a <- hc.a$silinfo
sil.a$clus.avg.widths
# not very good  ~0.45
# compute PAM clusters
pam.a <- pam(gss.a.mat, 2)
# visulize as silhouette plot
fviz_silhouette(pam.a)
# similar to hierarchical
#compare clusters to marital status
table(GSS.A.comp$marital2, km.a$cluster)
table(GSS.A.comp$marital2, hc.a$cluster)
table(GSS.A.comp$marital2, pam.a$cluster)
ksil.a <- silhouette(km.a$cluster, dist(gss.a.mat))
km.a <- kmeans(gss.a.mat, 2, 10)
sum(km.a)
print(km.a)
km.a$size
km.a$cluster
grid.arrange(elbow.a, sil.plot.a, ncol=2)
table(trainA$marital2, trainA$pred)
table(validA$marital2, validA$pred)
table(testA$marital2, testA$pred)
testB$pred <- predict(fitB, newdata = testB, type = "response")
testB$pred <- ifelse(testB$pred > 0.5,1,0)
table(testB$marital2, testB$pred)
(264+51)/(264+39+73+51)
validB$pred2 <- predict(fitB2, newdata = validB, type = "response")
validB$pred2 <- ifelse(validB$pred2 > 0.5,1,0)
table(validB$marital2, validB$pred2)
(255+56)/(255+30+81+56)
testB$pred2 <- predict(fitB2, newdata = testB, type = "response")
testB$pred2 <- ifelse(testB$pred2 > 0.5,1,0)
table(testB$marital2, testB$pred2)
(271+47)/(271+32+77+47)
trainC$pred <- fitC$fitted.values
trainC$pred <- ifelse(trainC$pred > 0.5,1,0)
table(trainC$marital2, trainC$pred)
testC$pred <- predict(fitC, newdata = testC, type = "response")
testC$pred <- ifelse(testC$pred > 0.5,1,0)
table(testC$marital2, testC$pred)
(281+41)/(281+42+81+41)
summary(fitC)
fitC <- glm(marital2 ~ xmarsex + pornlaw + partyid + fund + polviews + happy + trust + attend + relig16 + helpful + fair + consci + satjob + satfin + xmovie, family=binomial(link='logit'),data=trainC)
fitC <- glm(marital2 ~ year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + helpful + fair + consci + satjob + satfin + xmovie, family=binomial(link='logit'),data=trainC)
summary(fitC)
trainC$pred2 <- fitC2$fitted.values
trainC$pred2 <- ifelse(trainC$pred > 0.5,1,0)
table(trainC$marital2, trainC$pred2)
fitC2 <- glm(marital2 ~ xmarsex + pornlaw + partyid + fund + polviews + happy + trust + attend + relig16 + helpful + fair + consci + satjob + satfin + xmovie, family=binomial(link='logit'),data=trainC)
summary(fitC2)
trainC$pred2 <- fitC2$fitted.values
trainC$pred2 <- ifelse(trainC$pred > 0.5,1,0)
table(trainC$marital2, trainC$pred2)
(1292+109)/(1292+109+295+288)
fitC2 <- glm(marital2 ~ xmarsex + pornlaw + partyid + fund + polviews + happy + trust + attend + relig16 + helpful + fair + consci + satjob + satfin + xmovie, family=binomial(link='logit'),data=trainC)
trainC$pred2 <- fitC2$fitted.values
trainC$pred2 <- ifelse(trainC$pred2 > 0.5,1,0)
table(trainC$marital2, trainC$pred2)
(1296+183)/(1296+105+400+183)
validC$pred2 <- predict(fitC2, newdata = validC, type = "response")
validC$pred2 <- ifelse(validC$pred2 > 0.5,1,0)
table(validC$marital2, validC$pred2)
(262+33)/(262+39+93+33)
testC$pred2 <- predict(fitC2, newdata = testC, type = "response")
testC$pred2 <- ifelse(testC$pred2 > 0.5,1,0)
table(testC$marital2, testC$pred2)
(288+28)/(288+35+94+28)
table(GSSnew$marital2, GSSnew$ballot)
summary(GSSnew$marital2)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$happy))
colnames(tab) <- c("status", "happy", "count")
pie_5b <- ggplot(tab, aes(status, happy)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("How happy are you?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
pie_5b
library(ggplot2)
library(gridExtra)
library(plyr)
library(rpart)
library(rpart.plot)
library(Hmisc)
library(DMwR)
library(randomForest)
library(plotROC)
library(factoextra)
library(NbClust)
library(cluster)
grid.arrange(pie_1b, pie_5b, ncol=2)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$trust))
colnames(tab) <- c("status", "trust", "count")
pie_13b <- ggplot(tab, aes(status, trust)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("Can people be trusted?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
TrustGraph2 <- ggplot(GSSnew, aes(x= trust,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="trust") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
TrustGraph2
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$family16))
colnames(tab) <- c("status", "family16", "count")
pie_21b <- ggplot(tab, aes(status, family16)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("Live with both parents at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
pie_21b
SexEducGraph2 <- ggplot(data=subset(GSSnew, !is.na(sexeduc)), aes(x= sexeduc,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="sexeduc") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
SexEducGraph2
familyGraph2 <- ggplot(GSSnew, aes(x= family16,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="family16") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent) + theme(axis.text.x=element_text(angle = -90, hjust = 0))
familyGraph2
##Party Identification
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$partyid))
colnames(tab) <- c("status", "party", "count")
pie_4b <- ggplot(tab, aes(status, party)) +
geom_point(aes(size = count), colour = "navy") +
theme_bw() + xlab("Marital Status?") + ylab("Party identification?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
pie_4b
TrustGraph2 <- ggplot(GSSnew, aes(x= trust,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="trust") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent) + theme(axis.text.x=element_text(angle = -90, hjust = 0))
colnames(GSS.C)
TrustGraph2
TrustGraph2 <- ggplot(data=subset(GSSnew, !is.na(trust)), aes(x= trust,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="trust") +
facet_grid(~marital2) + scale_y_continuous(labels = scales::percent) + theme(axis.text.x=element_text(angle = -90, hjust = 0))
TrustGraph2
#Ballot A
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0.00479512)
printcp(rtree_fitA)
rpart.plot(rtree_fitA, shadow.col="gray", nn=TRUE)
trainApred <- predict(rtree_fitA, trainA, type = 'class')
table(trainApred, trainA$marital2)
##Accuracy: (1570+319)/(1570+101+319+357)
###Accuracy: 80.49%
#Ballot B
rtree_fitB <-rpart(marital2 ~ year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + divlaw + xmovie + fefam, data = trainB, method = 'class', cp = 0.00519031)
printcp(rtree_fitB)
rpart.plot(rtree_fitB, shadow.col="gray", nn=TRUE)
trainBpred <- predict(rtree_fitB, trainB, type = 'class')
table(trainBpred, trainB$marital2)
##Accuracy: (1356+164)/(1356+164+417+51)
###Accuracy: 76.46%
#Ballot C
rtree_fitC <-rpart(marital2 ~ year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + trust + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + helpful + fair + consci + satjob + satfin + abnomore + absingle + xmovie, data = trainC, method = 'class', cp = 0.00604491)
printcp(rtree_fitC)
rpart.plot(rtree_fitC, shadow.col="gray", nn=TRUE)
trainCpred <- predict(rtree_fitC, trainC, type = 'class')
table(trainCpred, trainC$marital2)
##Accuracy: (1305+287)/(1305+287+296+96)
##Accuracy: 80.24%
##Source: https://www.r-bloggers.com/using-decision-trees-to-predict-infant-birth-weights/
####Decision trees: more error in predicting married (2/3), more accurate with predicting split (4/5)
#using DMwR package
## Ballot A
knnOutputA <- knnImputation(GSS.A[, !names(GSS.A) %in% "medv"])  # perform knn imputation.
anyNA(knnOutputA)
summary(knnOutputA)
## Ballot B
knnOutputB <- knnImputation(GSS.B[, !names(GSS.B) %in% "medv"])  # perform knn imputation.
anyNA(knnOutputB)
summary(knnOutputB)
## Ballot C
knnOutputC <- knnImputation(GSS.C[, !names(GSS.C) %in% "medv"])  # perform knn imputation.
anyNA(knnOutputC)
summary(knnOutputC)
##Separate into train, validate and test
## Ballot A
set.seed(567)
rand <- runif(nrow(knnOutputA))
trainAknn <- knnOutputA[rand>0.3,]
validAknn <- knnOutputA[rand>0.15 & rand <0.3,]
testAknn <- knnOutputA[rand<0.15,]
## Ballot B
set.seed(678)
rand <- runif(nrow(knnOutputB))
trainBknn <- knnOutputB[rand>0.3,]
validBknn <- knnOutputB[rand>0.15 & rand <0.3,]
testBknn <- knnOutputB[rand<0.15,]
## Ballot C
set.seed(789)
rand <- runif(nrow(knnOutputC))
trainCknn <- knnOutputC[rand>0.3,]
validCknn <- knnOutputC[rand>0.15 & rand <0.3,]
testCknn <- knnOutputC[rand<0.15,]
ImpTreeC <- rpart.plot(rtree_fitCknn, shadow.col="gray", nn=TRUE)
rtree_fitCknn <-rpart(marital2 ~ year + region +  pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + trust + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + helpful + fair + consci + satjob + satfin + abnomore + absingle, data = trainCknn, method = 'class', cp =  0.00435920)
printcp(rtree_fitCknn)
ImpTreeC <- rpart.plot(rtree_fitCknn, shadow.col="gray", nn=TRUE)
pama_stats <- cluster.stats(gss.a.mat, pam.a$cluster)
library(ggplot2)
library(gridExtra)
library(plyr)
library(rpart)
library(rpart.plot)
library(Hmisc)
library(DMwR)
library(randomForest)
library(plotROC)
library(factoextra)
library(NbClust)
library(cluster)
gss.a.mat <- model.matrix(~0 + year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + satfin + abnomore + absingle + divlaw, GSS.A.comp)
pam.a <- pam(gss.a.mat, 2)
pama_stats <- cluster.stats(gss.a.mat, pam.a$cluster)
hc.a <- eclust(gss.a.mat, "hclust", k=2, method="ward.D2", graph=FALSE)
sil.a <- hc.a$silinfo
sil.a$clus.avg.widths
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + sizecat + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0.00479512)
printcp(rtree_fitA)
rpart.plot(rtree_fitA, shadow.col="gray", nn=TRUE)
colnames(GSS.A)
