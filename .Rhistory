<<<<<<< HEAD
"sphrs2", "polviews", "happy", "trust", "class", "income")
GSS.divorce <- GSS.complete[,var_list]
GSS.divorce <- GSS.complete[GSS.complete$year>=1990,var_list]
View(GSS.divorce)
rm( GSS.complete )
gc()
save(GSS.divorce , file = "GSSdivorce.rda")
load("GSS.complete.rda")
load("GSScomplete.rda")
View(GSS.divorce)
View(GSS.complete)
=======
droplevels(partyid)
predictA <- data.frame(predict(object=fit, testA, se.fit = TRUE)[[1]])
}
View(trainA)
droplevels(trainA)
length_divisor <- 20
predictA<-foreach(m=1:400,.combine=cbind) %dopar% {
# using sample function without seed
sampleRows <- sample(nrow(trainA), size=floor((nrow(trainA)/length_divisor)))
fit <- lm(marital2~year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income98 + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA[sampleRows,])
droplevels(testA)
droplevels(partyid)
predictA <- data.frame(predict(object=fit, testA, se.fit = TRUE)[[1]])
}
droplevels(trainA)
length_divisor <- 20
predictA<-foreach(m=1:400,.combine=cbind) %dopar% {
# using sample function without seed
sampleRows <- sample(nrow(trainA), size=floor((nrow(trainA)/length_divisor)))
fit <- lm(marital2~year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income98 + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA[sampleRows,])
droplevels(testA)
predictA <- data.frame(predict(object=fit, testA, se.fit = TRUE)[[1]])
}
droplevels(trainA)
length_divisor <- 20
predictA<-foreach(m=1:400,.combine=cbind) %dopar% {
# using sample function without seed
sampleRows <- sample(nrow(trainA), size=floor((nrow(trainA)/length_divisor)))
fit <- lm(marital2~year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income98 + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA[sampleRows,])
droplevels(testA)
predictA <- data.frame(predict(object=fit, testA, se.fit = TRUE)[[1]])
}
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0)
library(rpart)
>>>>>>> refs/remotes/origin/Decision-Trees-
knitr::opts_chunk$set(echo = TRUE)
load("GSSdivorce.rda")
#remove sphrs2, agewed, martype
GSS.divorce.na <- GSS.divorce
GSS.divorce <- GSS.divorce.na[GSS.divorce$year>=1996, ]
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce
GSS.divorce$marital <- factor(GSS.divorce$marital)
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
GSS.divorce$marital2 [is.na(GSS.divorce$marital) ==T] <- NA
GSS.divorce$marital2 <- factor(GSS.divorce$marital2)
GSSnew <- GSS.divorce[!is.na(GSS.divorce$marital2),]
summary(GSSnew$marital2)
library(ggplot2)
library(plyr)
##Opinion on Premarital Sex
#Married vs Divorced vs Separated vs Other
tab <- as.data.frame(table(GSSnew$marital, GSSnew$premarsx))
colnames(tab) <- c("status", "premarital", "count")
pie_1a <- ggplot(tab, aes(status, premarital)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on premarital sex?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$premarsx))
colnames(tab) <- c("status", "premarital", "count")
pie_1b <- ggplot(tab, aes(status, premarital)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on premarital sex?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Opinion on Pornography Laws
tab <- as.data.frame(table(GSSnew$marital, GSSnew$pornlaw))
colnames(tab) <- c("status", "porn", "count")
pie_2a <- ggplot(tab, aes(status, porn)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on pornography regulation?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$pornlaw))
colnames(tab) <- c("status", "porn", "count")
pie_2b <- ggplot(tab, aes(status, porn)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on pornography regulation?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Opinion on Extramarital Sex
tab <- as.data.frame(table(GSSnew$marital, GSSnew$xmarsex))
colnames(tab) <- c("status", "exmar", "count")
pie_3a <- ggplot(tab, aes(status, exmar)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on extramarital sex?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$xmarsex))
colnames(tab) <- c("status", "exmar", "count")
pie_3b <- ggplot(tab, aes(status, exmar)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Opinion on extramarital sex?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Party Identification
tab <- as.data.frame(table(GSSnew$marital, GSSnew$partyid))
colnames(tab) <- c("status", "party", "count")
pie_4a <- ggplot(tab, aes(status, party)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Party identification?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$partyid))
colnames(tab) <- c("status", "party", "count")
pie_4b <- ggplot(tab, aes(status, party)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Party identification?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##How happy are you?
tab <- as.data.frame(table(GSSnew$marital, GSSnew$happy))
colnames(tab) <- c("status", "happy", "count")
pie_5a <- ggplot(tab, aes(status, happy)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("How happy are you?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$happy))
colnames(tab) <- c("status", "happy", "count")
pie_5b <- ggplot(tab, aes(status, happy)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("How happy are you?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Fundamentalism of Religion
tab <- as.data.frame(table(GSSnew$marital, GSSnew$fund))
colnames(tab) <- c("status", "fund", "count")
pie_6a <- ggplot(tab, aes(status, fund)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Fundamentalism of religion?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$fund))
colnames(tab) <- c("status", "fund", "count")
pie_6b <- ggplot(tab, aes(status, fund)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Fundamentalism of religion?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Self-Identified Class
tab <- as.data.frame(table(GSSnew$marital, GSSnew$class))
colnames(tab) <- c("status", "class", "count")
pie_7a <- ggplot(tab, aes(status, class)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Self-identified class?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$class))
colnames(tab) <- c("status", "class", "count")
pie_7b <- ggplot(tab, aes(status, class)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Self-identified class?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Work Status
tab <- as.data.frame(table(GSSnew$marital, GSSnew$wrkstat))
colnames(tab) <- c("status", "work", "count")
pie_8a <- ggplot(tab, aes(status, work)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Work status?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$wrkstat))
colnames(tab) <- c("status", "work", "count")
pie_8b <- ggplot(tab, aes(status, work)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Work status?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Years of Education
tab <- as.data.frame(table(GSSnew$marital, GSSnew$educ))
colnames(tab) <- c("status", "edu", "count")
pie_9a <- ggplot(tab, aes(status, edu)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Years of education?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$educ))
colnames(tab) <- c("status", "edu", "count")
pie_9b <- ggplot(tab, aes(status, edu)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Years of education?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
###Histogram
EducGraph2 <- ggplot(GSSnew, aes(x= educ,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="educ") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
##Children
tab <- as.data.frame(table(GSSnew$marital, GSSnew$childs))
colnames(tab) <- c("status", "child", "count")
pie_10a <- ggplot(tab, aes(status, child)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Children?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$childs))
colnames(tab) <- c("status", "child", "count")
pie_10b <- ggplot(tab, aes(status, child)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Children?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
#Sex Education in Schools
tab <- as.data.frame(table(GSSnew$marital, GSSnew$sexeduc))
colnames(tab) <- c("status", "sexed", "count")
pie_11a <- ggplot(tab, aes(status, sexed)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Sex education in schools?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$sexeduc))
colnames(tab) <- c("status", "sexed", "count")
pie_11b <- ggplot(tab, aes(status, sexed)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Sex education in schools?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
SexEducGraph2 <- ggplot(GSSnew, aes(x= sexeduc,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="sexeduc") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
##Region
tab <- as.data.frame(table(GSSnew$marital, GSSnew$region))
colnames(tab) <- c("status", "region", "count")
pie_12a <- ggplot(tab, aes(status, region)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Region?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$region))
colnames(tab) <- c("status", "region", "count")
pie_12b <- ggplot(tab, aes(status, region)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Region?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Can people be trusted?
tab <- as.data.frame(table(GSSnew$marital, GSSnew$trust))
colnames(tab) <- c("status", "trust", "count")
pie_13a <- ggplot(tab, aes(status, trust)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Can people be trusted?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$trust))
colnames(tab) <- c("status", "trust", "count")
pie_13b <- ggplot(tab, aes(status, trust)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Can people be trusted?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
TrustGraph2 <- ggplot(GSSnew, aes(x= trust,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="trust") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
##Region at age 16
tab <- as.data.frame(table(GSSnew$marital, GSSnew$reg16))
colnames(tab) <- c("status", "region16", "count")
pie_20a <- ggplot(tab, aes(status, region16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Region at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$reg16))
colnames(tab) <- c("status", "region16", "count")
pie_20b <- ggplot(tab, aes(status, region16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Region at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##Live with both parents at age 16
tab <- as.data.frame(table(GSSnew$marital, GSSnew$family16))
colnames(tab) <- c("status", "family16", "count")
pie_21a <- ggplot(tab, aes(status, family16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Live with both parents at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSSnew$marital2, GSSnew$family16))
colnames(tab) <- c("status", "family16", "count")
pie_21b <- ggplot(tab, aes(status, family16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Live with both parents at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
##If not with parents, why?
tab <- as.data.frame(table(GSSnew$marital, GSSnew$famdif16))
colnames(tab) <- c("status", "familyif16", "count")
pie_1 <- ggplot(tab, aes(status, familyif16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("If not with both parents, why?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
<<<<<<< HEAD
ggplot(tab, aes(status, familyif16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("If not with both parents, why?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
ggplot(tab, aes(status, familyif16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("If not with both parents, why?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
ggplot(tab, aes(status, family16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Live with both parents at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
tab <- as.data.frame(table(GSS.divorce$marital, GSS.divorce$family16))
colnames(tab) <- c("status", "family16", "count")
pie_21 <- ggplot(tab, aes(status, family16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Live with both parents at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
ggplot(tab, aes(status, family16)) +
geom_point(aes(size = count), colour = "green") +
theme_bw() + xlab("Marital Status?") + ylab("Live with both parents at age 16?") + scale_size_continuous(range=c(3,15)) + theme(plot.title = element_text(size = 10), legend.position="none")  + coord_fixed(ratio = 1)
#remove sphrs2, agewed, martype
GSS.divorce.na <- GSS.divorce
GSS.divorce <- GSS.divorce.na[GSS.divorce$year>=1996, ]
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce
GSS.divorce$marital <- factor(GSS.divorce$marital)
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
GSS.divorce$marital2 [is.na(GSS.divorce$marital) ==T] <- NA
GSS.divorce$marital2 <- factor(GSS.divorce$marital2)
GSSnew <- GSS.divorce[!is.na(GSS.divorce$marital2),]
summary(GSSnew$marital2)
GSS.divorce.na <- GSS.divorce
GSS.divorce <- GSS.divorce.na[GSS.divorce$year>=1996, ]
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce
GSS.divorce$marital <- factor(GSS.divorce$marital)
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
load("GSSdivorce.rda")
#remove sphrs2, agewed, martype
GSS.divorce.na <- GSS.divorce
GSS.divorce <- GSS.divorce.na[GSS.divorce$year>=1996, ]
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce
GSS.divorce$marital <- factor(GSS.divorce$marital)
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
GSS.divorce$marital2 [is.na(GSS.divorce$marital) ==T] <- NA
GSS.divorce$marital2 <- factor(GSS.divorce$marital2)
GSSnew <- GSS.divorce[!is.na(GSS.divorce$marital2),]
summary(GSSnew$marital2)
GSS.A <- subset(GSSnew, (GSSnew$version==1|GSSnew$version==4))
GSS.B <- subset(GSSnew, (GSSnew$version==2|GSSnew$version==5))
GSS.C <- subset(GSSnew, (GSSnew$version==3|GSSnew$version==6))
=======
ParentsGraph2 <- ggplot(GSSnew, aes(x= famdif16,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="family") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
#### Experimenting with Plotting Relative Percentages
GSSnew$class2 <- "blank"
GSSnew$class2 [GSSnew$class == "NO CLASS"] <- "NO CLASS"
GSSnew$class2 [GSSnew$class == "UPPER CLASS"] <- "UPPER CLASS"
GSSnew$class2 [GSSnew$class == "MIDDLE CLASS"] <- "MIDDLE CLASS"
GSSnew$class2 [GSSnew$class == "WORKING CLASS"] <- "WORKING CLASS"
GSSnew$class2 [GSSnew$class == "LOWER CLASS"] <- "LOWER CLASS"
GSSnew$class2 [is.na(GSSnew$class) ==T] <- NA
ClassGraph <- ggplot(GSSnew, aes(class2, group = marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
scale_y_continuous(labels=scales::percent) +
ylab("relative frequencies") +
facet_grid(~marital2)
ClassGraphPerc <- ggplot(GSSnew, aes(x= class2,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="class2") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
ClassGraph2 <- ggplot(GSSnew, aes(x= class,  group=marital2)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="class") +
facet_grid(~marital2) +
scale_y_continuous(labels = scales::percent)
## http://www.r-graph-gallery.com/48-grouped-barplot-with-ggplot2/
set.seed(567)
## Separate GSSnew by ballot type A, B or C
GSS.A <- subset(GSSnew, (GSSnew$version==1|GSSnew$version==4))
GSS.B <- subset(GSSnew, (GSSnew$version==2|GSSnew$version==5))
GSS.C <- subset(GSSnew, (GSSnew$version==3|GSSnew$version==6))
## Train-validate-test split for GSS Ballot A
>>>>>>> refs/remotes/origin/Decision-Trees-
set.seed(567)
rand <- runif(nrow(GSS.A))
trainA <- GSS.A[rand>0.3,]
validA <- GSS.A[rand>0.15 & rand <0.3,]
testA <- GSS.A[rand<0.15,]
<<<<<<< HEAD
=======
## Train-validate-test split for GSS Ballot B
>>>>>>> refs/remotes/origin/Decision-Trees-
set.seed(678)
rand <- runif(nrow(GSS.B))
trainB <- GSS.B[rand>0.3,]
validB <- GSS.B[rand>0.15 & rand <0.3,]
testB <- GSS.B[rand<0.15,]
<<<<<<< HEAD
=======
## Train-validate-test split for GSS Ballot B
>>>>>>> refs/remotes/origin/Decision-Trees-
set.seed(789)
rand <- runif(nrow(GSS.C))
trainC <- GSS.C[rand>0.3,]
validC <- GSS.C[rand>0.15 & rand <0.3,]
testC <- GSS.C[rand<0.15,]
<<<<<<< HEAD
?dist
dist.mat.A <- dist(trainA, method = "euclidean")
clusters.a <- hclust(dist.mat.A)
?cutree
tree.a <- cutree(clusters.a, k=2)
plot(cut(as.dendrogram(clusters.a), h=0)$upper, leaflab="none")
tree.a2 <- cutree(clusters.a, k=8)
tree.a
head(tree.a2)
head(tree.a)
?cut.dendrogram
summary(tree.a)
summary(tree.a2)
View(trainA)
colnames(trainA)
clusters.vars.A <- c("year", "sexeduc", "region", "premarsx", "xmarsex", "partyid", "fund", "childs",  "degree", "Agecat1", "widowed", "educ", "wrkstat", "spwrksta", "polviews", "happy", "trust", "class",    "reg16", "family16", "famdif16", "born", "parborn", "income98", "size", "attend", "relig16", "bible",    "satfin", "abnomore", "absingle", "divlaw", "fefam", "marital2")
clusters.train.a <- trainA[,clusters.vars.A]
View(clusters.train.a)
clusters.vars.A <- c("year", "sexeduc", "region", "premarsx", "xmarsex", "partyid", "fund", "childs",  "degree", "Agecat1", "widowed", "educ", "wrkstat", "polviews", "happy", "trust", "class",    "reg16", "family16", "famdif16", "born", "parborn", "income98", "size", "attend", "relig16", "bible",    "satfin", "abnomore", "absingle", "divlaw", "fefam", "marital2")
clusters.train.a <- trainA[,clusters.vars.A]
dist.mat.A <- dist(clusters.train.a, method = "euclidean")
clusters.a <- hclust(dist.mat.A)
tree.a <- cutree(clusters.a, k=2)
plot(cut(as.dendrogram(clusters.a), h=0)$upper, leaflab="none")
plot(cut(as.dendrogram(clusters.a), h=10000)$upper, leaflab="none")
plot(cut(as.dendrogram(clusters.a), h=5000)$upper, leaflab="none")
plot(cut(as.dendrogram(clusters.a), h=4000)$upper, leaflab="none")
plot(cut(as.dendrogram(clusters.a), h=2000)$upper, leaflab="none")
?dist
dist.mat.A2 <- dist(clusters.train.a, method = "manhattan")
clusters.a2 <- hclust(dist.mat.A)
plot(cut(as.dendrogram(clusters.a2), h=0)$upper, leaflab="none")
plot(cut(as.dendrogram(clusters.a2), h=2000)$upper, leaflab="none")
dist.mat.A2 <- dist(clusters.train.a, method = "manhattan")
clusters.a2 <- hclust(dist.mat.A2)
plot(cut(as.dendrogram(clusters.a2), h=2000)$upper, leaflab="none")
dist.mat.A3 <- dist(clusters.train.a, method = "maximum")
clusters.a3 <- hclust(dist.mat.A3)
plot(cut(as.dendrogram(clusters.a3), h=2000)$upper, leaflab="none")
plot(cut(as.dendrogram(clusters.a3), h=0)$upper, leaflab="none")
clusters.a3
summary(clusters.a3)
summary(clusters.a2)
table(tree.a)
tree.a2 <- cutree(clusters.a2, k=2)
table(tree.a2)
tree.a3 <- cutree(clusters.a3, k=2)
table(tree.a3)
load("GSSdivorce.rda")
View(GSS.divorce)
load("C:/Users/Sarah/Documents/GitHub/data-science-project/GSScomplete.rda")
var_list <- c("oversamp", "formwt", "wtssall", "sampcode", "sample", "id", "ballot",
"year", "sexeduc", "region", "premarsx", "xmarsex", "pornlaw", "agewed",
"marital", "partyid", "hapmar", "denom", "fund", "childs", "degree",
"age", "divorce", "widowed", "educ", "natdrug", "wrkstat", "spwrksta",
"polviews", "happy", "trust", "class", "income", "version", "reg16",
"family16", "famdif16", "born", "parborn", "income91", "size", "attend",
"relig16", "bible", "helpful", "fair", "consci", "satjob", "satfin",
"abnomore", "absingle", "divlaw", "xmovie", "fefam")
GSS.divorce <- GSS.complete[GSS.complete$year>=1996,var_list]
GSS.divorce$Agecat1<-cut(GSS.divorce$age, c(0,18,25,35,45,55,65,75,85,95))
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce$marital <- factor(GSS.divorce$marital)
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
GSS.divorce$marital2 [is.na(GSS.divorce$marital) ==T] <- NA
GSS.divorce$marital2 <- factor(GSS.divorce$marital2)
GSSnew <- GSS.divorce[!is.na(GSS.divorce$marital2),]
summary(GSSnew$marital2)
rm( GSS.complete )
gc()
save(GSS.divorce , file = "GSSdivorce.rda")
rm(GSS.divorce)
save(GSS.divorce , file = "GSSdivorce.rda")
load("GSSdivorce.rda")
clusters.vars.A <- c("year", "sexeduc", "region", "premarsx", "xmarsex", "partyid", "fund", "childs",  "degree", "Agecat1", "widowed", "educ", "wrkstat", "polviews", "happy", "trust", "class",    "reg16", "family16", "famdif16", "born", "parborn", "income91", "size", "attend", "relig16", "bible",    "satfin", "abnomore", "absingle", "divlaw", "fefam", "marital2")
clusters.train.a <- trainA[,clusters.vars.A]
GSS.A <- subset(GSSnew, (GSSnew$version==1|GSSnew$version==4))
GSS.B <- subset(GSSnew, (GSSnew$version==2|GSSnew$version==5))
GSS.C <- subset(GSSnew, (GSSnew$version==3|GSSnew$version==6))
set.seed(567)
rand <- runif(nrow(GSS.A))
trainA <- GSS.A[rand>0.3,]
validA <- GSS.A[rand>0.15 & rand <0.3,]
testA <- GSS.A[rand<0.15,]
set.seed(678)
rand <- runif(nrow(GSS.B))
trainB <- GSS.B[rand>0.3,]
validB <- GSS.B[rand>0.15 & rand <0.3,]
testB <- GSS.B[rand<0.15,]
set.seed(789)
rand <- runif(nrow(GSS.C))
trainC <- GSS.C[rand>0.3,]
validC <- GSS.C[rand>0.15 & rand <0.3,]
testC <- GSS.C[rand<0.15,]
clusters.vars.A <- c("year", "sexeduc", "region", "premarsx", "xmarsex", "partyid", "fund", "childs",  "degree", "Agecat1", "widowed", "educ", "wrkstat", "polviews", "happy", "trust", "class",    "reg16", "family16", "famdif16", "born", "parborn", "income91", "size", "attend", "relig16", "bible",    "satfin", "abnomore", "absingle", "divlaw", "fefam", "marital2")
clusters.train.a <- trainA[,clusters.vars.A]
dist.mat.A <- dist(clusters.train.a, method = "euclidean")
clusters.a <- hclust(dist.mat.A)
dist.mat.A2 <- dist(clusters.train.a, method = "manhattan")
?dist
clusters.train.a <- complete.cases(trainA[,clusters.vars.A])
clusters.train.a <- trainA[complete.cases(trainA),clusters.vars.A]
View(trainA)
clusters.train.a <- trainA[,clusters.vars.A]
clusters.train.a <- clusters.train.a[complete.cases(clusters.train.a),]
clusters.train.a <- trainA[,clusters.vars.A]
View(clusters.train.a)
load("C:/Users/Sarah/Documents/GitHub/data-science-project/GSScomplete.rda")
var_list <- c("oversamp", "formwt", "wtssall", "sampcode", "sample", "id", "ballot",
"year", "sexeduc", "region", "premarsx", "xmarsex", "pornlaw", "agewed",
"marital", "partyid", "hapmar", "denom", "fund", "childs", "degree",
"age", "divorce", "widowed", "educ", "natdrug", "wrkstat", "spwrksta",
"polviews", "happy", "trust", "class", "income", "version", "reg16",
"family16", "famdif16", "born", "parborn", "income91", "income98", "size", "attend",
"relig16", "bible", "helpful", "fair", "consci", "satjob", "satfin",
"abnomore", "absingle", "divlaw", "xmovie", "fefam")
GSS.divorce <- GSS.complete[GSS.complete$year>=1996,var_list]
GSS.divorce$Agecat1<-cut(GSS.divorce$age, c(0,18,25,35,45,55,65,75,85,95))
GSS.divorce <- GSS.divorce[GSS.divorce$marital=="MARRIED" | GSS.divorce$marital=="DIVORCED" | GSS.divorce$marital=="SEPARATED", ]
GSS.divorce$marital <- factor(GSS.divorce$marital)
GSS.divorce$marital2 <- "married"
GSS.divorce$marital2 [GSS.divorce$marital == "SEPARATED"] <- "split"
GSS.divorce$marital2 [GSS.divorce$marital == "DIVORCED"] <- "split"
GSS.divorce$marital2 [is.na(GSS.divorce$marital) ==T] <- NA
GSS.divorce$marital2 <- factor(GSS.divorce$marital2)
GSSnew <- GSS.divorce[!is.na(GSS.divorce$marital2),]
summary(GSSnew$marital2)
rm( GSS.complete )
gc()
save(GSS.divorce , file = "GSSdivorce.rda")
sum(is.na(GSS.divorce$income))
sum(is.na(GSS.divorce$income91))
sum(is.na(GSS.divorce$income98))
=======
###Logistic Regression
#glm(marital2 ~ <x>, data = <data>, family = binomial())
#TrainA
fitA <- glm(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, family=binomial(link='logit'),data=trainA)
#data = dfTraining, family = binomial())
summary(fitA)
#TrainB
fitB <- glm(marital2 ~ year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + educ + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + divlaw + xmovie + fefam, family=binomial(link='logit'),data=trainB)
summary(fitB)
#TrainC
fitC <- glm(marital2 ~ year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + educ + wrkstat + polviews + trust + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + helpful + fair + consci + satjob + satfin + abnomore + absingle , family=binomial(link='logit'),data=trainC)
summary(fitC)
#eliminated fefam b/c otherwise "algorithm did not converge -- fitted probabilities numerically 0 or 1 occurred"
#issues with marital2 being only 1 value --> create a factor variable rather than character (0 = married, 1 = divorced/split?)
install.packages('rpart')
library(rpart)
#Ballot A
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0)
printcp(rtree_fitA)
install.packages("rpart")
library(rpart)
#Ballot A
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0)
printcp(rtree_fitA)
rtree_fitA <-rpart(marital2 ~ year + sexeduc + region + premarsx + xmarsex + partyid + fund + childs + degree + Agecat1 + widowed + wrkstat + polviews + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + satfin + abnomore + absingle + divlaw + fefam, data = trainA, method = 'class', cp = 0.00479512)
printcp(rtree_fitA)
rpart.plot(rtree_fitA, shadow.col="gray", nn=TRUE)
library(rpart.plot)
rpart.plot(rtree_fitA, shadow.col="gray", nn=TRUE)
rpart.plot(rtree_fitA, shadow.col="gray", nn=TRUE)
trainApred <- predict(rtree_fitA, trainA, type = 'class')
table(trainApred, trainA$marital2)
##Accuracy: (2626 + 407)/(2626 + 407 + 740 + 136)
rtree_fitB <-rpart(marital2 ~ year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + educ + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + divlaw + xmovie + fefam, data = trainB, method = 'class', cp = 0)
printcp(rtree_fitB)
rtree_fitB <-rpart(marital2 ~ year + sexeduc + region + premarsx + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + educ + wrkstat + polviews + happy + trust + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + bible + helpful + fair + consci + satjob + satfin + divlaw + xmovie + fefam, data = trainB, method = 'class', cp = 0.00519031)
printcp(rtree_fitB)
library(rpart.plot)
rpart.plot(rtree_fitB, shadow.col="gray", nn=TRUE)
rpart.plot(rtree_fitB, shadow.col="gray", nn=TRUE)
trainBpred <- predict(rtree_fitA, trainA, type = 'class')
table(trainBpred, trainB$marital2)
trainBpred <- predict(rtree_fitA, trainB, type = 'class')
table(trainBpred, trainB$marital2)
rtree_fitC <-rpart(marital2 ~ year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + educ + wrkstat + polviews + trust + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + helpful + fair + consci + satjob + satfin + abnomore + absingle, data = trainC, method = 'class', cp = 0)
printcp(rtree_fitC)
rtree_fitC <-rpart(marital2 ~ year + region + xmarsex + pornlaw + partyid + fund + childs + degree + Agecat1 + widowed + educ + wrkstat + polviews + trust + happy + class + income + reg16 + family16 + born + parborn + size + attend + relig16 + helpful + fair + consci + satjob + satfin + abnomore + absingle, data = trainC, method = 'class', cp = 0.00604491)
library(rpart.plot)
rpart.plot(rtree_fitB, shadow.col="gray", nn=TRUE)
trainBpred <- predict(rtree_fitB, trainB, type = 'class')
table(trainBpred, trainB$marital2)
library(rpart.plot)
rpart.plot(rtree_fitC, shadow.col="gray", nn=TRUE)
trainCpred <- predict(rtree_fitC, trainC, type = 'class')
table(trainCpred, trainC$marital2)
rpart.plot(rtree_fitC, shadow.col="gray", nn=TRUE)
summary(marital2)
summary(GNNnew)
table(marital2)
library (plyr)
count(GSSnew, 'marital2')
GSSnew1 <- GSSnew
maritaln1 <- as.dataframe(model.matrix(GSSnew1$maritaln1 -1))
maritaln1 <- as.data.frame(model.matrix(GSSnew1$maritaln1 -1))
maritaln1 <- as.data.frame(model.matrix(~GSSnew1$maritaln1 -1))
str(GSSnew1)
library (plyr)
count(GSSnew, 'size')
library (plyr)
count(GSSnew1, 'size')
size <- factor(size)
count(GSSnew1, 'size')
size <- factor(size)
size <- factor(GSSnew1$size)
count(GSSnew1, 'size')
str(GSSnew1$size)
size <- round(GSSnew1$size/7000)*7000
size <-factor(size)
str(GSSnew1$size)
str(size)
count(GSSnew1, 'size')
GSSnew1$size <- factor(GSSnew1$size)
str(GSSnew1$size)
#Educ
count(GSSnew1, 'educ')
GSSnew1$educ <-factor(GSSnew1$educ)
str(GSSnew1$educ)
#Age
count(GSSnew1, 'age')
GSSnew1$age <-factor(GSSnew1$age)
str(GSSnew1$age)
#Childs
count(GSSnew1, 'childs')
GSSnew1$childs <-factor(GSSnew1$childs)
str(GSSnew1$childs)
#agewed
count(GSSnew1, 'agewed')
GSSnew1$agewed <-factor(GSSnew1$agewed)
str(GSSnew1$agewed)
#year
count(GSSnew1, 'year')
GSSnew1$year <-factor(GSSnew1$year)
str(GSSnew1$year)
#id
count(GSSnew1, 'id')
GSSnew1$id <-factor(GSSnew1$id)
str(GSSnew1$id)
# sampcode
count(GSSnew1, 'sampcode')
GSSnew1$sampcode <-factor(GSSnew1$sampcode)
str(GSSnew1$sampcode)
#oversamp
count(GSSnew1, 'oversamp')
GSSnew1$oversamp <-factor(GSSnew1$oversamp)
str(GSSnew1$oversamp)
#formwt
count(GSSnew1, 'formwt')
GSSnew1$formwt <-factor(GSSnew1$formwt)
str(GSSnew1$formwt)
#wtssall
count(GSSnew1, 'wtssall')
GSSnew1$wtssall <-factor(GSSnew1$wtssall)
str(GSSnew1$wtssall)
#version
count(GSSnew1, 'version')
GSSnew1$version <-factor(GSSnew1$version)
str(GSSnew1$version)
View(GSSnew1)
dim(GSSnew1)
GSS.A1 <- subset(GSSnew1, (GSSnew1$version==1|GSSnew1$version==4))
GSS.B1 <- subset(GSSnew1, (GSSnew1$version==2|GSSnew1$version==5))
GSS.C1 <- subset(GSSnew1, (GSSnew1$version==3|GSSnew1$version==6))
## Train-validate-test split for GSS Ballot A
set.seed(567)
rand <- runif(nrow(GSS.A1))
trainA1 <- GSS.A1[rand>0.3,]
validA1 <- GSS.A1[rand>0.15 & rand <0.3,]
testA1 <- GSS.A1[rand<0.15,]
## Train-validate-test split for GSS Ballot B
set.seed(678)
rand <- runif(nrow(GSS.B1))
trainB1 <- GSS.B1[rand>0.3,]
validB1 <- GSS.B1[rand>0.15 & rand <0.3,]
testB1 <- GSS.B1[rand<0.15,]
## Train-validate-test split for GSS Ballot B
set.seed(789)
rand <- runif(nrow(GSS.C1))
trainC1 <- GSS.C1[rand>0.3,]
validC1 <- GSS.C1[rand>0.15 & rand <0.3,]
testC1 <- GSS.C1[rand<0.15,]
library(class)
euclideanDist <- function(a, b){
d = 0
for(i in c(1:(length(a)-1) ))
{
d = d + (a[[i]]-b[[i]])^2
}
d = sqrt(d)
return(d)
}
knn_predict <- function(testA1, trainA1, k_value){
pred <- c()  #empty pred vector
#LOOP-1
for(i in c(1:nrow(testA1))){   #looping over each record of test data
eu_dist =c()          #eu_dist & eu_char empty  vector
eu_char = c()
good = 0              #good & bad variable initialization with 0 value
bad = 0
#LOOP-2-looping over train data
for(j in c(1:nrow(trainA1))){
#adding euclidean distance b/w test data point and train data to eu_dist vector
eu_dist <- c(eu_dist, euclideanDist(testA1[i,], trainA1[j,]))
#adding class variable of training data in eu_char
eu_char <- c(eu_char, as.character(trainA1[j,][[6]]))
}
eu <- data.frame(eu_char, eu_dist) #eu dataframe created with eu_char & eu_dist columns
eu <- eu[order(eu$eu_dist),]       #sorting eu dataframe to gettop K neighbors
eu <- eu[1:k_value,]               #eu dataframe with top K neighbors
#Loop 3: loops over eu and counts classes of neibhors.
for(k in c(1:nrow(eu))){
if(as.character(eu[k,"eu_char"]) == "g"){
good = good + 1
}
else
bad = bad + 1
}
# Compares the no. of neighbors with class label good or bad
if(good > bad){          #if majority of neighbors are good then put "g" in pred vector
pred <- c(pred, "g")
}
else if(good < bad){
#if majority of neighbors are bad then put "b" in pred vector
pred <- c(pred, "b")
}
}
return(pred) #return pred vector
}
accuracy <- function(testA1){
correct = 0
for(i in c(1:nrow(testA1))){
if(testA1[i,6] == testA1[i,7]){
correct = correct+1
}
}
accu = correct/nrow(testA1) * 100
return(accu)
}
K = 5
predictions <- knn_predict(testA1, trainA1, K) #calling knn_predict()
>>>>>>> refs/remotes/origin/Decision-Trees-
